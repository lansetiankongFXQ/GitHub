#!/usr/bin/env python
# encoding: utf-8
import sys
import os
sys.path.append(os.getcwd())
from taodata.settings import LOCAL_REDIS_HOST, LOCAL_REDIS_PORT, LOCAL_REDIS_PASSWORD
from taodata.spiders.cues.items import WbBaseProfileItem, WbBaseBlogItem, WbTopicBangItem, WbHotWordItem
import redis
import uuid
from urllib.parse import urlparse
import urllib
from taodata.spiders.cues.items_cfg import wb_base_profile_cfg, wb_base_blog_cfg, wb_topic_bang_cfg, wb_hot_word_cfg
from taodata.spiders.temp.utils import time_fix
import datetime
import re

r = redis.Redis(host=LOCAL_REDIS_HOST, port=LOCAL_REDIS_PORT, password=LOCAL_REDIS_PASSWORD)


def parse_query(url, param):
    q_dict = urllib.parse.parse_qs(urlparse(url).query)
    if param in q_dict:
        return q_dict.get(param)[0]
    else:
        return None

def time_fix(time_string):
    now_time = datetime.datetime.now()
    today = datetime.date.today()
    oneday = datetime.timedelta(days=1)
    yesterday = today - oneday

    if '+0800' in time_string:
        time_string = datetime.datetime.strptime(time_string, '%a %b %d %H:%M:%S +0800 %Y').strftime('%Y-%m-%d %H:%M:%S')
        return time_string

    if '分钟前' in time_string:
        minutes = re.search(r'^(\d+)分钟', time_string).group(1)
        created_at = now_time - datetime.timedelta(minutes=int(minutes))
        return created_at.strftime('%Y-%m-%d %H:%M:%S')

    if '刚刚' in time_string:
        created_at = now_time
        return created_at.strftime('%Y-%m-%d %H:%M:%S')

    if '小时前' in time_string:
        minutes = re.search(r'^(\d+)小时', time_string).group(1)
        created_at = now_time - datetime.timedelta(hours=int(minutes))
        return created_at.strftime('%Y-%m-%d %H:%M:%S')

    if '今天' in time_string:
        return time_string.replace('今天', now_time.strftime('%Y-%m-%d'))

    if '昨天' in time_string:
        return time_string.replace('昨天', yesterday.strftime('%Y-%m-%d'))

    if '月' in time_string:
        time_string = time_string.replace('月', '-').replace('日', '')
        time_string = str(now_time.year) + '-' + time_string
        return time_string

    if '-' in time_string and len(time_string) == 5:
        time_string = str(now_time.year) + '-' + time_string
        return time_string

    return time_string


def build_wb_base_profile_item(data):
    item = WbBaseProfileItem()
    for key in wb_base_profile_cfg:
        values = wb_base_profile_cfg[key]
        for v in values:
            if key in data:
                item[v] = str(data[key])
    return item


def build_wb_base_blog_item(data, blog_type):
    item = WbBaseBlogItem()
    for key in wb_base_blog_cfg:
        values = wb_base_blog_cfg[key]
        for v in values:
            if key in data:
                item[v] = str(data[key])

    if 'user' in data:
        user = data['user']
        item['user'] = build_wb_base_profile_item(user)

    if 'created_at' in item:
        item['created_at'] = time_fix(item['created_at'])

    item['_id'] = str(uuid.uuid1())

    if blog_type:
        item['blog_type'] = blog_type

    return item


def build_wb_topic_bang_item(data):
    item = WbTopicBangItem()
    for key in wb_topic_bang_cfg:
        values = wb_topic_bang_cfg[key]
        for v in values:
            if key in data:
                item[v] = str(data[key])

    item['_id'] = str(uuid.uuid1())
    item['crawl_time'] = str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

    return item


def build_wb_hot_word_item(data):
    item = WbHotWordItem()
    for key in wb_hot_word_cfg:
        values = wb_hot_word_cfg[key]
        for v in values:
            if key in data:
                item[v] = str(data[key])

    item['_id'] = str(uuid.uuid1())
    item['crawl_time'] = str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

    return item


